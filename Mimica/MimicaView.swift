//
// MimicaView.swift
// Generated by Core Animator version 1.4 on 07.08.17.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class MimicaPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class MimicaView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 147, height: 93))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:147, height:93)
		__scaling__.center = CGPoint(x:73.5, y:46.5)
		__scaling__.layer.masksToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let mimciaLaunch__root = MimicaPassthroughView()
		let mimciaLaunch__xScale = MimicaPassthroughView()
		let mimciaLaunch__yScale = MimicaPassthroughView()
		let mimciaLaunch = UIView()
		mimciaLaunch.bounds = CGRect(x:0, y:0, width:147.0, height:93.0)
		mimciaLaunch__root.layer.position = CGPoint(x:73.500, y:46.500)
		mimciaLaunch__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mimciaLaunch__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mimciaLaunch__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(mimciaLaunch__root)
		mimciaLaunch__root.addSubview(mimciaLaunch__xScale)
		mimciaLaunch__xScale.addSubview(mimciaLaunch__yScale)
		mimciaLaunch__yScale.addSubview(mimciaLaunch)
		__scaling__.addSubview(mimciaLaunch__root)
		viewsByName["MimciaLaunch__root"] = mimciaLaunch__root
		viewsByName["MimciaLaunch__xScale"] = mimciaLaunch__xScale
		viewsByName["MimciaLaunch__yScale"] = mimciaLaunch__yScale
		viewsByName["MimciaLaunch"] = mimciaLaunch

		let mimicaEye__root = MimicaPassthroughView()
		let mimicaEye__xScale = MimicaPassthroughView()
		let mimicaEye__yScale = MimicaPassthroughView()
		let mimicaEye = UIImageView()
		let imgMimicaEye = UIImage(named:"MimicaEye.png", in: bundle, compatibleWith: nil)
		if imgMimicaEye == nil {
			print("** Warning: Could not create image from 'MimicaEye.png'")
		}
		mimicaEye.image = imgMimicaEye
		mimicaEye.contentMode = .center
		mimicaEye.bounds = CGRect(x:0, y:0, width:63.0, height:27.0)
		mimicaEye__root.layer.position = CGPoint(x:32.000, y:15.000)
		mimicaEye__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mimicaEye__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mimicaEye__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mimciaLaunch.addSubview(mimicaEye__root)
		mimicaEye__root.addSubview(mimicaEye__xScale)
		mimicaEye__xScale.addSubview(mimicaEye__yScale)
		mimicaEye__yScale.addSubview(mimicaEye)
		mimciaLaunch.addSubview(mimicaEye__root)
		viewsByName["MimicaEye__root"] = mimicaEye__root
		viewsByName["MimicaEye__xScale"] = mimicaEye__xScale
		viewsByName["MimicaEye__yScale"] = mimicaEye__yScale
		viewsByName["MimicaEye"] = mimicaEye

		let mimicaNose__root = MimicaPassthroughView()
		let mimicaNose__xScale = MimicaPassthroughView()
		let mimicaNose__yScale = MimicaPassthroughView()
		let mimicaNose = UIImageView()
		let imgMimicaNose = UIImage(named:"MimicaNose.png", in: bundle, compatibleWith: nil)
		if imgMimicaNose == nil {
			print("** Warning: Could not create image from 'MimicaNose.png'")
		}
		mimicaNose.image = imgMimicaNose
		mimicaNose.contentMode = .center
		mimicaNose.bounds = CGRect(x:0, y:0, width:115.0, height:93.0)
		mimicaNose__root.layer.position = CGPoint(x:89.500, y:46.500)
		mimicaNose__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mimicaNose__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mimicaNose__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mimciaLaunch.addSubview(mimicaNose__root)
		mimicaNose__root.addSubview(mimicaNose__xScale)
		mimicaNose__xScale.addSubview(mimicaNose__yScale)
		mimicaNose__yScale.addSubview(mimicaNose)
		mimciaLaunch.addSubview(mimicaNose__root)
		viewsByName["MimicaNose__root"] = mimicaNose__root
		viewsByName["MimicaNose__xScale"] = mimicaNose__xScale
		viewsByName["MimicaNose__yScale"] = mimicaNose__yScale
		viewsByName["MimicaNose"] = mimicaNose

		self.viewsByName = viewsByName
	}

	// - MARK: MimicaLaunch

	func addMimicaLaunchAnimation() {
		addMimicaLaunchAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addMimicaLaunchAnimation(completion: ((Bool) -> Void)?) {
		addMimicaLaunchAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addMimicaLaunchAnimation(removedOnCompletion: Bool) {
		addMimicaLaunchAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addMimicaLaunchAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addMimicaLaunchAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addMimicaLaunchAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.250
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "MimicaLaunch")
			self.animationCompletions[layer.animation(forKey: "MimicaLaunch")!] = complete
		}

		let mimicaEyeScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		mimicaEyeScaleXAnimation.duration = 0.250
		mimicaEyeScaleXAnimation.values = [1.000, 0.900, 1.000] as [Float]
		mimicaEyeScaleXAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		mimicaEyeScaleXAnimation.timingFunctions = [linearTiming, linearTiming]
		mimicaEyeScaleXAnimation.beginTime = beginTime
		mimicaEyeScaleXAnimation.fillMode = fillMode
		mimicaEyeScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["MimicaEye__xScale"]?.layer.add(mimicaEyeScaleXAnimation, forKey:"MimicaLaunch_ScaleX")

		let mimicaEyeScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		mimicaEyeScaleYAnimation.duration = 0.250
		mimicaEyeScaleYAnimation.values = [1.000, 0.300, 1.000] as [Float]
		mimicaEyeScaleYAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		mimicaEyeScaleYAnimation.timingFunctions = [linearTiming, linearTiming]
		mimicaEyeScaleYAnimation.beginTime = beginTime
		mimicaEyeScaleYAnimation.fillMode = fillMode
		mimicaEyeScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["MimicaEye__yScale"]?.layer.add(mimicaEyeScaleYAnimation, forKey:"MimicaLaunch_ScaleY")
	}

	func removeMimicaLaunchAnimation() {
		self.layer.removeAnimation(forKey: "MimicaLaunch")
		self.viewsByName["MimicaEye__xScale"]?.layer.removeAnimation(forKey: "MimicaLaunch_ScaleX")
		self.viewsByName["MimicaEye__yScale"]?.layer.removeAnimation(forKey: "MimicaLaunch_ScaleY")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "MimicaLaunch")
	}
}